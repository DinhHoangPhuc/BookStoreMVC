// <auto-generated />
using BookStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookStore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250429135446_AddImageUrlToProduct")]
    partial class AddImageUrlToProduct
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookStore.Models.Catergory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Catergories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 2,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 3,
                            DisplayOrder = 3,
                            Name = "Romance"
                        });
                });

            modelBuilder.Entity("BookStore.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ListPrice")
                        .HasColumnType("float");

                    b.Property<double>("Price100")
                        .HasColumnType("float");

                    b.Property<double>("Price50")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "John Doe",
                            CategoryId = 1,
                            Description = "Introduction to C# programming",
                            ISBN = "978-1234567890",
                            ImageUrl = "",
                            ListPrice = 150000.0,
                            Price100 = 130000.0,
                            Price50 = 140000.0,
                            Title = "C# Basics"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Jane Smith",
                            CategoryId = 2,
                            Description = "Deep dive into advanced C# concepts",
                            ISBN = "978-1234567891",
                            ImageUrl = "",
                            ListPrice = 250000.0,
                            Price100 = 220000.0,
                            Price50 = 230000.0,
                            Title = "Advanced C#"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Steve Rogers",
                            CategoryId = 3,
                            Description = "Learn modern web development with ASP.NET Core",
                            ISBN = "978-1234567892",
                            ImageUrl = "",
                            ListPrice = 300000.0,
                            Price100 = 260000.0,
                            Price50 = 280000.0,
                            Title = "ASP.NET Core"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Bruce Banner",
                            CategoryId = 1,
                            Description = "Master database interaction with Entity Framework",
                            ISBN = "978-1234567893",
                            ImageUrl = "",
                            ListPrice = 200000.0,
                            Price100 = 170000.0,
                            Price50 = 180000.0,
                            Title = "Entity Framework"
                        },
                        new
                        {
                            Id = 5,
                            Author = "Natasha Romanoff",
                            CategoryId = 2,
                            Description = "Learn LINQ with practical examples",
                            ISBN = "978-1234567894",
                            ImageUrl = "",
                            ListPrice = 120000.0,
                            Price100 = 100000.0,
                            Price50 = 110000.0,
                            Title = "LINQ Essentials"
                        },
                        new
                        {
                            Id = 6,
                            Author = "Tony Stark",
                            CategoryId = 3,
                            Description = "Explore common design patterns in software development",
                            ISBN = "978-1234567895",
                            ImageUrl = "",
                            ListPrice = 400000.0,
                            Price100 = 360000.0,
                            Price50 = 380000.0,
                            Title = "Design Patterns"
                        },
                        new
                        {
                            Id = 7,
                            Author = "Robert Martin",
                            CategoryId = 1,
                            Description = "Write better code with clean coding principles",
                            ISBN = "978-1234567896",
                            ImageUrl = "",
                            ListPrice = 350000.0,
                            Price100 = 300000.0,
                            Price50 = 330000.0,
                            Title = "Clean Code"
                        },
                        new
                        {
                            Id = 8,
                            Author = "Martin Fowler",
                            CategoryId = 2,
                            Description = "Learn techniques to improve existing code",
                            ISBN = "978-1234567897",
                            ImageUrl = "",
                            ListPrice = 300000.0,
                            Price100 = 260000.0,
                            Price50 = 280000.0,
                            Title = "Refactoring"
                        },
                        new
                        {
                            Id = 9,
                            Author = "Mike Cohn",
                            CategoryId = 3,
                            Description = "Understand agile practices in software development",
                            ISBN = "978-1234567898",
                            ImageUrl = "",
                            ListPrice = 220000.0,
                            Price100 = 180000.0,
                            Price50 = 200000.0,
                            Title = "Agile Development"
                        },
                        new
                        {
                            Id = 10,
                            Author = "Gene Kim",
                            CategoryId = 1,
                            Description = "Guide to implementing DevOps culture",
                            ISBN = "978-1234567899",
                            ImageUrl = "",
                            ListPrice = 500000.0,
                            Price100 = 450000.0,
                            Price50 = 480000.0,
                            Title = "DevOps Handbook"
                        });
                });

            modelBuilder.Entity("BookStore.Models.Product", b =>
                {
                    b.HasOne("BookStore.Models.Catergory", "Catergory")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catergory");
                });
#pragma warning restore 612, 618
        }
    }
}
